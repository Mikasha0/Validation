{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/generateId.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/logic/updateFieldArrayRootError.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isMessage.ts","../src/utils/isRadioInput.ts","../src/utils/isRegex.ts","../src/logic/getCheckboxValue.ts","../src/logic/getRadioValue.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/append.ts","../src/utils/isPlainObject.ts","../src/utils/isWeb.ts","../src/utils/cloneObject.ts","../src/utils/fillEmptyArray.ts","../src/utils/getValidationModes.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/unset.ts","../src/utils/update.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/live.ts","../src/logic/getDirtyFields.ts","../src/logic/getFieldValueAs.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/getRuleValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/createFormControl.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/logic/unsetEmptyArray.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _mounted = React.useRef(true);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: React.useCallback(\n      (value: { name?: InternalFieldName }) =>\n        _mounted.current &&\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          value.name,\n          exact,\n        ) &&\n        shouldRenderFormState(value, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState,\n          ...value,\n        }),\n      [control, exact],\n    ),\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(() => {\n    _mounted.current = true;\n    return () => {\n      _mounted.current = false;\n    };\n  }, []);\n\n  return getProxyFormState(\n    formState,\n    control,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Subscribe to the entire form values change and re-render at the hook level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   control,\n *   defaultValue: {\n *     name: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   control,\n *   name: \"fieldA\",\n *   defaultValue: \"default value\",\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   control,\n *   name: [\"fieldA\", \"fieldB\"],\n *   defaultValue: {\n *     fieldA: \"data\",\n *     fieldB: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * // can skip passing down the control into useWatch if the form is wrapped with the FormProvider\n * const values = useWatch()\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nexport function useWatch<TFieldValues extends FieldValues>(\n  props?: UseWatchProps<TFieldValues>,\n) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: React.useCallback(\n      (formState: { name?: InternalFieldName; values?: FieldValues }) => {\n        if (\n          shouldSubscribeByName(\n            _name.current as InternalFieldName,\n            formState.name,\n            exact,\n          )\n        ) {\n          const fieldValues = generateWatchOutput(\n            _name.current as InternalFieldName | InternalFieldName[],\n            control._names,\n            formState.values || control._formValues,\n          );\n\n          updateValue(\n            isUndefined(_name.current) ||\n              (isObject(fieldValues) && !objectHasFunction(fieldValues))\n              ? { ...fieldValues }\n              : Array.isArray(fieldValues)\n              ? [...fieldValues]\n              : isUndefined(fieldValues)\n              ? defaultValue\n              : fieldValues,\n          );\n        }\n      },\n      [control, exact, defaultValue],\n    ),\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => control._removeUnmounted());\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  ControllerFieldState,\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: true,\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n  const field = get(control._fields, name);\n\n  if (field) {\n    field._f._c = true;\n  }\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) =>\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          }),\n        [name],\n      ),\n      onBlur: React.useCallback(\n        () =>\n          _registerProps.current.onBlur({\n            target: {\n              value: get(control._formValues, name),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.BLUR,\n          }),\n        [name, control],\n      ),\n      ref: (ref) => {\n        if (field && ref) {\n          field._f.ref = ref;\n        }\n      },\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          enumerable: true,\n          get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n          enumerable: true,\n          get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n          enumerable: true,\n          get: () => !!get(formState.touchedFields, name),\n        },\n        error: {\n          enumerable: true,\n          get: () => get(formState.errors, name),\n        },\n      },\n    ) as ControllerFieldState,\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name?: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus) {\n          _f.ref.focus();\n          break;\n        } else if (_f.refs && _f.refs[0].focus) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && isString(message)) {\n      inputRef.setCustomValidity(message);\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!Array.isArray(data) && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        copy[key] = cloneObject(data[key]);\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) && isEmptyArray(objectRef)))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        deepEqual(data[key], formValues[key])\n          ? delete dirtyFieldsFromValues[key]\n          : (dirtyFieldsFromValues[key] = true);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    errors: {},\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async () => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (fieldReference._c) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        _proxyFormState.isValid && _updateValid();\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name]\n        ? validateFields[name] + 1\n        : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        _updateValid();\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => key && get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    focusFieldBy(\n      _fields,\n      (key) => key && get(_formState.errors, key),\n      _names.mount,\n    );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await executeBuiltInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _focusError();\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _focusError,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  props.rules &&\n    (control as Control).register(\n      name as FieldPath<TFieldValues>,\n      props.rules as RegisterOptions<TFieldValues>,\n    );\n\n  const callback = React.useCallback(\n    ({\n      values,\n      name: fieldArrayName,\n    }: {\n      values?: FieldValues;\n      name?: InternalFieldName;\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        const fieldValues = get(values, _name.current);\n        if (Array.isArray(fieldValues)) {\n          setFields(fieldValues);\n          ids.current = fieldValues.map(generateId);\n        }\n      }\n    },\n    [],\n  );\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted)\n    ) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError ? !error && existingError.type : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (field && field._f) {\n          validateField(\n            field,\n            get(control._formValues, name),\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(\n        control._fields,\n        (key) => !!key && key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    errors: {},\n    defaultValues: props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: React.useCallback(\n      (value: FieldValues) => {\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...value,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n      [control],\n    ),\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    formState.submitCount && control._focusError();\n  }, [control, formState.submitCount]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","useFormState","methods","updateFormState","useState","_formState","_mounted","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","useCallback","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_registerProps","register","rules","field","_fields","_f","_c","updateMounted","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","onChange","onBlur","ref","fieldState","defineProperties","invalid","enumerable","isTouched","error","appendErrors","validateAllFieldCriteria","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","currentField","focus","refs","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","focusIndex","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","append","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","fillEmptyArray","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","insert","moveArrayAt","from","to","splice","prepend","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","isEmptyArray","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","updateAt","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","schemaErrorLookup","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitted","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","resolver","_executeSchema","executeBuiltInValidation","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","v","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","getFieldState","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","keepSubmitCount","keepIsSubmitted","keepErrors","_reset","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","render","children","createElement","Provider","keyName","setFields","ids","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","then","existingError","swap","move","prependValue","prependAt","appendValue","appendAt","remove","insertValue","insertAt","update","useMemo","_formControl"],"mappings":"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"}